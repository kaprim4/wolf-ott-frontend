import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Select2Data } from 'ng-select2-component';
import { EventType } from 'src/app/core/constants/events';
import { EventService } from 'src/app/core/service/event.service';
import { LineService } from 'src/app/core/service/line.service';
import { BouquetsService } from 'src/app/core/service/bouquets.service';
import { ILine } from 'src/app/core/interfaces/line';
import { IBouquet } from 'src/app/core/interfaces/ibouquet';
import { UserService } from 'src/app/core/service/user.service';
import { IUser } from 'src/app/core/interfaces/user';
import { PackagesService } from 'src/app/core/service/packages.service';
import { IPackage } from 'src/app/core/interfaces/ipackage';

@Component({
  selector: 'app-add',
  templateUrl: './add.component.html',
  styleUrls: ['./add.component.scss']
})
export class AddComponent implements OnInit {
  
  // Select2 configuration
  countries: Select2Data = [];
  packages: IPackage[] = [];
  bouquets: IBouquet[] = []; // Array to hold bouquet options
  users: IUser[] = [];
  selectedBouquets: number[] = []; // Track selected bouquets
  currentStep: number = 1;
  addLineForm!: FormGroup;

  constructor(
    private fb: FormBuilder,
    private eventService: EventService,
    private lineService: LineService,
    private usersService: UserService,
    private packageService: PackagesService,
    private bouquetsService: BouquetsService
  ) {}

  ngOnInit(): void {
    this.eventService.broadcast(EventType.CHANGE_PAGE_TITLE, {
      title: "Add Line",
      breadCrumbItems: [{ label: 'Forms', path: '.' }, { label: 'Add Line', path: '.', active: true }]
    });

    this.loadUsers();
    this.loadPackages();
    this.loadBouquets();

    this.addLineForm = this.fb.group({
      details: this.fb.group({
        username: ['', Validators.required],
        password: ['', Validators.required],
        owner: ['', Validators.required],
        package: ['', Validators.required],
        packageCost: [0, Validators.required],
        duration: [0, Validators.required],
        maxConnections: [0, Validators.required],
        expirationDate: ['', Validators.required],
        contactEmail: ['', [Validators.required, Validators.email]],
        resellerNotes: ['']
      }),
      restrictions: this.fb.group({
        allowedIPs: [''],
        allowedUserAgents: [''],
        bypassUARestrictions: [false],
        lockToISP: [false],
        currentISP: ['']
      }),
      reviews: this.fb.group({
        selectedBouquets: [[]] // Array to hold selected bouquets
      }),
      acceptTerms: [false, Validators.requiredTrue]
    });
  }

  loadUsers(): void {
    this.usersService.getAllUsers().subscribe(users => {
      this.users = users;
    })
  }

  loadPackages(): void {
    this.packageService.getAllPackages().subscribe(packages => this.packages = packages)
  }

  loadBouquets(): void {
    this.bouquetsService.getAllBouquets().subscribe(bouquets => {
      this.bouquets = bouquets;
    });
  }

  get detailsForm() { 
    return this.addLineForm.get('details') as FormGroup; 
  }

  get restrictionsForm() { 
    return this.addLineForm.get('restrictions') as FormGroup; 
  }

  get reviewsForm() { 
    return this.addLineForm.get('reviews') as FormGroup; 
  }

  gotoNext(): void {
    if (this.addLineForm.valid) {
      this.currentStep++;
    }
  }

  toggleBouquet(bouquetId: number, isChecked: boolean): void {
    if (isChecked) {
      this.selectedBouquets.push(bouquetId);
    } else {
      this.selectedBouquets = this.selectedBouquets.filter(id => id !== bouquetId);
    }
    this.reviewsForm.get('selectedBouquets')?.setValue(this.selectedBouquets);
  }

  submitForm(): void {
    if (this.addLineForm.valid) {
      const newLine: ILine = {
        id: 0, // ID will be generated by the backend
        username: this.detailsForm.value.username,
        password: this.detailsForm.value.password,
        owner: this.detailsForm.value.owner,
        status: 1, // Default status
        online: false, // Default online status
        trial: false, // Default trial status
        active: 1, // Default active status
        connections: this.detailsForm.value.maxConnections,
        expiration: this.detailsForm.value.expirationDate,
        lastConnection: '',
        accessToken: '',
        adminEnabled: 0,
        adminNotes: '',
        allowedIps: '',
        allowedOutputs: '',
        allowedUa: '',
        asNumber: '',
        bouquet: '',
        bypassUa: false,
        contact: '',
        createdAt: '',
        enabled: 0,
        expDate: '',
        forceServerId: 0,
        forcedCountry: '',
        isE2: false,
        isIsplock: false,
        isMag: false,
        isRestreamer: false,
        isStalker: false,
        isTrial: false,
        ispDesc: '',
        lastActivity: '',
        lastActivityArray: '',
        lastExpirationVideo: '',
        lastIp: '',
        maxConnections: 0,
        memberId: 0,
        packageId: '',
        pairId: '',
        playToken: '',
        resellerNotes: '',
        updated: ''
      };

      this.lineService.addLine(newLine).subscribe(response => {
        // Handle successful addition of line
      });
    }
  }

  get select2Users(): Select2Data {
    return [
      {
        label: 'Users',
        options: this.users.map(user => {
          return {
            value: user.id,
            label: user.username
          }
        })
      },
    ];
  }

  get select2Packages(): Select2Data {
    return [
      {
        label: 'Packages',
        options: this.packages.map(pkg => {
          return {
            value: pkg.id,
            label: pkg.packageName
          }
        })
      },
    ];
  }

  onPackageChange(){

    const id = this.detailsForm.controls['package'].value;
    const pkg = this.packages.find(p => p.id === id);
    console.log("Package Selected:", pkg);
    
  }
}
